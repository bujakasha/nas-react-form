{"version":3,"sources":["hooks/useForm.js","utils/apiCaller.js","utils/getSchema.js","hooks/useFetchSchema.js","components/FormSuccess.js","components/fields/NasButton.js","components/widgets/InputWithNasButton.js","components/widgets/index.js","components/FormSchemaNas.js","App.js","serviceWorker.js","index.js"],"names":["useFormSchemaNas","formSchema","_useState","useState","_useState2","Object","slicedToArray","isLoading","setIsLoading","_useState3","formData","_useState4","setFormData","_useState5","_useState6","isSubmitted","setIsSubmitted","_useState7","_useState8","submittedData","setSubmitData","useEffect","console","log","schema","uiSchema","handleChange","form","handleSubmit","setTimeout","reset","propTypes","shape","object","API_URL","process","getSchemaByName","schemaName","endpoint","method","arguments","length","undefined","body","header","content-type","axios","headers","url","concat","data","FormData","JSON","stringify","then","response","status","objectSpread","success","error","catch","callApi","useFetchSchema","setSchema","setUiSchema","_useState9","_useState10","hasError","setHasError","res","err","string","isRequired","toJson","val","FormSuccess","_ref","onClick","react_default","a","createElement","Fragment","type","NasButton","btnAction","props","objectWithoutProperties","name","value","getBtnActionFromSchmema","additionalProperties","InputWithNasButton","widgets","_ref2","fields_NasButton","FORM_ACTION","FormSchemaNas","schemaRequest","components_FormSuccess","lib_default","action","target","onChange","App","className","components_FormSchemaNas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa024df3.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { shape, object } from \"prop-types\";\n\nfunction useFormSchemaNas(formSchema) {\n  const [isLoading, setIsLoading] = useState();\n  const [formData, setFormData] = useState(\n    (formSchema && formSchema.formData) || {}\n  );\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [submittedData, setSubmitData] = useState();\n\n  useEffect(() => {\n    console.log(\"useFormSchemaNas: formSchema changed\");\n    setFormData(formSchema.formData);\n  }, [formSchema.formData]);\n\n  function handleChange(form) {\n    setFormData(form.formData);\n  }\n  function handleSubmit(form) {\n    console.log(form)\n    setIsLoading(true);\n\n    setTimeout(() => {\n      setSubmitData(form.formData);\n      setIsSubmitted(true);\n      setIsLoading(false);\n    }, 700);\n  }\n\n  function reset() {\n    setIsLoading(false);\n    setIsSubmitted(false);\n    setFormData((formSchema && formSchema.formData) || {});\n    setSubmitData(null);\n  }\n\n  return {\n    schema: formSchema.schema,\n    uiSchema: formSchema.uiSchema,\n    formData: formData,\n    submittedData,\n\n    isLoading,\n    isSubmitted,\n\n    handleChange,\n    handleSubmit,\n    reset\n  };\n}\n\nuseFormSchemaNas.propTypes = {\n  formSchema: shape({\n    schema: object,\n    uiSchema: object,\n    formData: object\n  })\n};\n\nexport default useFormSchemaNas;\n","import axios from \"axios\";\n\nconst API_URL = process.env.REACT_APP_FORM_API_URL;\n\nexport function callApi(\n  endpoint,\n  method = \"get\",\n  body,\n  header = { \"content-type\": \"application/json\" }\n) {\n  return axios({\n    headers: header,\n    url: `${API_URL}/${endpoint}`,\n    method,\n    data:\n      body && body instanceof FormData\n        ? body\n        : body\n        ? JSON.stringify(body)\n        : null\n  })\n    .then(response => {\n      const { status, data } = response;\n      if (data) {\n        return {\n          success: status === 200,\n          ...data\n        };\n      } else {\n        return {\n          error: true,\n          ...data\n        };\n      }\n    })\n    .catch(error => {\n      console.log(\"API ERROR\", error);\n      return error.response ? error.response.data : error;\n    });\n}\n","import { callApi } from '../utils/apiCaller';\n\n\nexport function getSchemaByName(schemaName) {\n    return callApi(`schema/${schemaName}`);\n}","import { useState, useEffect } from \"react\";\nimport { string } from 'prop-types';\nimport { getSchemaByName } from \"../utils/getSchema\";\n\nfunction useFetchSchema(schemaName) {\n  const [schema, setSchema] = useState();\n  const [uiSchema, setUiSchema] = useState();\n  const [formData, setFormData] = useState();\n  const [isLoading, setIsLoading] = useState((schemaName && true) || false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    console.log(\"useFetchSchema: schemaName changed\");\n\n    setIsLoading(true);\n    setTimeout(() => {\n      getSchemaByName(schemaName)\n        .then(res => {\n          if (res && res.schema) {\n            setSchema(res.schema);\n            setUiSchema(res.uiSchema);\n            setFormData(res.formData);\n          } else if(!res.success){\n            setHasError(true);\n          }\n          console.log(\"useFetchSchema response:\", res);\n          setIsLoading(false);\n        })\n        .catch(err => {\n          console.log(\"err\", err);\n          setHasError(true);\n        });\n    }, 1000);\n  }, [schemaName]);\n\n  return {\n    schema,\n    uiSchema,\n    formData,\n\n    isLoading,\n    hasError\n  };\n}\n\nuseFetchSchema.propTypes = {\n  schemaName: string.isRequired\n};\n\n\nexport default useFetchSchema;\n","import React from \"react\";\nimport { func, object } from 'prop-types';\n\nconst toJson = val => JSON.stringify(val, null, 1);\n\nfunction FormSuccess({ data, onClick }) {\n  return (\n    <>\n      <h5>Your form has been submitted:</h5>\n      <span>data:</span>\n      {data && toJson(data)}\n      <br />\n      <br />\n      <button type=\"button\" onClick={onClick}>\n        {\" \"}\n        Give it another try{\" \"}\n      </button>\n    </>\n  );\n}\nFormSuccess.propTypes = {\n  data: object,\n  onClick: func.isRequired\n};\nexport default FormSuccess;\n","import React from \"react\";\nimport {  string, object, shape } from 'prop-types';\n\n\nfunction NasButton({ btnAction, ...props }) {\n\n    console.log('NasButton:' , props);\n    return(\n        <>\n        <button name={btnAction.name}> Lisää uusi </button>\n        <input type=\"hidden\" name={btnAction.name} value={btnAction.value} />\n        </>\n    );\n}\n\nNasButton.propTypes = {\n    btnAction: shape({\n        name: string.isRequired,\n        value: string.isRequired\n    }),\n  };\n\nexport default NasButton;","import React from \"react\";\nimport {  string, object } from 'prop-types';\nimport { NasButton } from '../fields/index';\n\nconst getBtnActionFromSchmema = ({ additionalProperties }) =>  additionalProperties&&additionalProperties.btnAction;\n\nfunction InputWithNasButton({ schema, ...props }) {\n    console.log('InputWithNasButton:' ,schema, props);\n    return(\n        <div>\n            <input type=\"text\" />\n            <NasButton btnAction={getBtnActionFromSchmema(schema)} />\n        </div>\n    );\n}\n\nInputWithNasButton.propTypes = {\n    id: string,\n    schema: object.isRequired,\n  };\n\nexport default InputWithNasButton;","\nimport InputWithNasButton from './InputWithNasButton';\n\n\nconst widgets = {\n     InputWithNasButton: InputWithNasButton\n};\n\nexport default widgets;","import React from \"react\";\nimport { string } from 'prop-types';\nimport useFormSchemaNas from \"../hooks/useForm\";\nimport useFetchSchema from \"../hooks/useFetchSchema\";\n\nimport Form from \"react-jsonschema-form\";\nimport FormSuccess from \"./FormSuccess\";\n\nimport widgets from './widgets/index'\n\nconst FORM_ACTION = `${process.env.REACT_APP_FORM_API_URL}/form`;\n\nfunction FormSchemaNas({ schemaName }) {\n    const schemaRequest = useFetchSchema(schemaName);\n    const form = useFormSchemaNas(schemaRequest);\n\n  return (\n    form.isSubmitted ? (\n        <FormSuccess data={form.submittedData} onClick={form.reset} />\n      ) : schemaRequest.isLoading ? (\n        \"Fetching schema...\"\n      ) : form.isLoading ? (\n        \"Loading...\"\n      ) : form&&form.schema ? (\n        <Form\n          schema={form.schema}\n          uiSchema={form.uiSchema}\n          formData={form.formData}\n\n          widgets={widgets}\n\n          action={FORM_ACTION}\n          method=\"post\"\n          target=\"_blank\"\n\n          onChange={form.handleChange}\n        //  onSubmit={form.handleSubmit}\n        />\n      ) : schemaRequest.hasError ? (\n        <> Could not fetch schema from server!! </>\n      ) : (\n        <> No schema provided to form component!! </>\n      )\n  );\n}\n\nFormSchemaNas.propTypes = {\n    schemaName: string.isRequired\n};\n\nexport default FormSchemaNas;\n","import React from \"react\";\nimport FormSchemaNas from './components/FormSchemaNas'\n\nimport \"./styles/_main.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormSchemaNas schemaName=\"nas\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}